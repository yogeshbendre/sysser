(vim.cluster.VsanClusterHealthSummary) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   clusterStatus = (vim.cluster.VsanClusterHealthSystemStatusResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      status = 'green',
      goalState = 'installed',
      untrackedHosts = (str) [],
      trackedHostsStatus = (vim.host.VsanHostHealthSystemStatusResult) [
         (vim.host.VsanHostHealthSystemStatusResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            status = 'green',
            issues = (str) []
         }
      ]
   },
   timestamp = 2019-06-20T08:05:05.174466Z,
   clusterVersions = (vim.cluster.VsanClusterHealthSystemVersionResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      hostResults = (vim.cluster.VsanHostHealthSystemVersionResult) [
         (vim.cluster.VsanHostHealthSystemVersionResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            version = '6.5.0.0',
            error = <unset>
         }
      ],
      vcVersion = '6.7.0',
      issueFound = true,
      upgradePossible = false
   },
   objectHealth = (vim.host.VsanObjectOverallHealth) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      objectHealthDetail = (vim.host.VsanObjectHealth) [
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'datamove',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'inaccessible',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'reducedavailabilitywithactiverebuild',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'nonavailabilityrelatedincompliance',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'reducedavailabilitywithnorebuild',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'nonavailabilityrelatedreconfig',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'reducedavailabilitywithnorebuilddelaytimer',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         },
         (vim.host.VsanObjectHealth) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numObjects = 0,
            health = 'healthy',
            objUuids = (str) [],
            dataProtectionHealth = <unset>
         }
      ],
      objectsComplianceDetail = (vim.cluster.StorageComplianceResult) [],
      objectVersionCompliance = true
   },
   vmHealth = <unset>,
   networkHealth = (vim.cluster.VsanClusterNetworkHealthResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      hostResults = (vim.host.VsanNetworkHealthResult) [
         (vim.host.VsanNetworkHealthResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            host = 'vim.HostSystem:host-24242',
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            vsanVmknicPresent = false,
            ipSubnets = (str) [],
            issueFound = true,
            peerHealth = (vim.host.VsanNetworkPeerHealthResult) [],
            vMotionHealth = (vim.host.VsanNetworkPeerHealthResult) [],
            multicastConfig = '',
            unicastConfig = <unset>,
            inUnicast = <unset>
         }
      ],
      issueFound = true,
      vsanVmknicPresent = false,
      matchingMulticastConfig = true,
      matchingIpSubnets = true,
      pingTestSuccess = true,
      largePingTestSuccess = true,
      hostLatencyCheckSuccess = true,
      potentialMulticastIssue = false,
      otherHostsInVsanCluster = (str) [],
      partitions = (vim.cluster.VsanClusterNetworkPartitionInfo) [
         (vim.cluster.VsanClusterNetworkPartitionInfo) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hosts = (str) [
               '5899c8b2-290b-661f-cff4-246e963d08d6'
            ],
            partitionUnknown = <unset>
         }
      ],
      hostsWithVsanDisabled = (str) [],
      hostsDisconnected = (str) [],
      hostsCommFailure = (str) [
         'sc2-hs1-b2818.eng.vmware.com'
      ],
      hostsInEsxMaintenanceMode = (str) [],
      hostsInVsanMaintenanceMode = (str) [],
      infoAboutUnexpectedHosts = (vim.host.VsanQueryResultHostInfo) [],
      clusterInUnicastMode = false
   },
   limitHealth = (vim.cluster.VsanClusterLimitHealthResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      issueFound = false,
      componentLimitHealth = 'green',
      diskFreeSpaceHealth = 'green',
      rcFreeReservationHealth = 'green',
      hostResults = (vim.host.VsanLimitHealthResult) [
         (vim.host.VsanLimitHealthResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            issueFound = false,
            maxComponents = 3000,
            freeComponents = 3000,
            componentLimitHealth = 'green',
            lowestFreeDiskSpacePct = 100,
            usedDiskSpaceB = 0,
            totalDiskSpaceB = 0,
            diskFreeSpaceHealth = 'green',
            reservedRcSizeB = 0,
            totalRcSizeB = 0,
            rcFreeReservationHealth = 'green',
            cdReservedSizeB = <unset>
         }
      ],
      whatifHostFailures = (vim.cluster.VsanClusterWhatifHostFailuresResult) [
         (vim.cluster.VsanClusterWhatifHostFailuresResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numFailures = 0,
            totalUsedCapacityB = 0,
            totalCapacityB = 0,
            totalRcReservationB = 0,
            totalRcSizeB = 0,
            usedComponents = 0,
            totalComponents = 3000,
            componentLimitHealth = 'green',
            diskFreeSpaceHealth = 'green',
            rcFreeReservationHealth = 'green'
         },
         (vim.cluster.VsanClusterWhatifHostFailuresResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            numFailures = 1,
            totalUsedCapacityB = 0,
            totalCapacityB = 0,
            totalRcReservationB = 0,
            totalRcSizeB = 0,
            usedComponents = 0,
            totalComponents = 0,
            componentLimitHealth = 'green',
            diskFreeSpaceHealth = 'green',
            rcFreeReservationHealth = 'green'
         }
      ],
      hostsCommFailure = (str) [
         'sc2-hs1-b2818.eng.vmware.com'
      ]
   },
   advCfgSync = (vim.cluster.VsanClusterAdvCfgSyncResult) [
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseParallelLookup',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.failoverLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomOwnerInflightOps',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.SharedHeapLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompHeapSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.MaxVMsPerHost',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.MapBlocksMin',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomSchedMetaDataToNamespace',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomClientHeapSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableDom',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseMaxExtentsPrefetch',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.masterSelectionLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableSsdLog',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomFullIoTraces',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableLsom',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.GweFetchExtentsFactor',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseCacheOverEvict',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.ObjectScrubsPerYear',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompResyncOutstandingIO',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.ClomRepairDelay',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.PreallocLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceGlobalBandwidthLimitPeriodMs',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseRetainCacheOnSnapshots',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.DiskFormatVersion',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceGlobalBandwidthLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseHeapSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.blPLOGLsnCacheLines',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.VSANDeviceMonitoring',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableVirsto',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.diskIoTimeout',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedDiskIOWeight',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.PerTraceMaxRolloverPeriods',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.heartbeatLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.ClomMaxComponentSizeGB',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableVsanSparseIO',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedNamespaceWeight',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.ClomRebalanceThreshold',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableRdt',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DOMScrubberEnabled',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompInflightOps',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceGlobalMaxRolloverPeriods',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.MapBlocksFlushThreshold',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.masterAbdicationLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomMaxLeafAssocsPerHost',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.ssdWbSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.diskIoRetryFactor',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedOutstandingIO',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.FlusherRegistryThreshold',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseEnabled',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseRetainCacheTTL',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DefaultHostDecommissionMode',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomClientInflightOpsPerPCPU',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableCmmds',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompResyncOutstandingKB',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.PerTraceBandwidthLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomBriefIoTraces',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.goto11',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.RecordsPerFormatWrite',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomOwnerHeapSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomLongOpUrgentTraceMS',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.heartbeatInterval',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.lsomSSDFlushIntervalUS',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.SwapThickProvisionDisabled',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.ObjsPerVM',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.MsecBeforeMetaFlush',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomHeapSize',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnablePlog',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Net.TcpipHeapMax',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.blPLOGCacheLines',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.Enabled',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.MaxMFRetryCount',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableDomIo',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseSpeculativePrefetch',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.ssdWbSizeCap',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.PerTraceBandwidthLimitPeriodMs',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'Virsto.InstanceHeapLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomLongOpTraceMS',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableVsanSparse',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.VsanSparseCacheThreshold',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedMetaDataWeight',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.discoveryLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DOMCompSchedMaxInflightMemOp',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedResyncWeight',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.warEvictionThreshold',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.MaxComponentsPerHost',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.singletonMasterLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.livenessLimit',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'LSOM.lsomSlowDeviceUnmount',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'CMMDS.heartbeatTolerance',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.DomCompSchedOutstandingKB',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      },
      (vim.cluster.VsanClusterAdvCfgSyncResult) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         inSync = true,
         name = 'VSAN.TraceEnableVsanSparseVerbose',
         hostValues = (vim.cluster.VsanClusterAdvCfgSyncHostResult) []
      }
   ],
   createVmHealth = (vim.cluster.VsanHostCreateVmHealthTestResult) [],
   physicalDisksHealth = (vim.host.VsanPhysicalDiskHealthSummary) [
      (vim.host.VsanPhysicalDiskHealthSummary) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         overallHealth = 'green',
         heapsWithIssues = (vim.host.VsanResourceHealth) [],
         slabsWithIssues = (vim.host.VsanResourceHealth) [],
         disks = (vim.host.VsanPhysicalDiskHealth) [],
         componentsWithIssues = (vim.host.VsanResourceHealth) [],
         hostname = 'sc2-hs1-b2817.eng.vmware.com',
         hostDedupScope = 0,
         error = <unset>
      }
   ],
   encryptionHealth = <unset>,
   fileServiceHealth = <unset>,
   hclInfo = (vim.cluster.VsanClusterHclInfo) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      hclDbLastUpdate = 2019-06-20T01:09:00Z,
      hclDbAgeHealth = 'green',
      hostResults = (vim.host.VsanHostHclInfo) [
         (vim.host.VsanHostHclInfo) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            hclChecked = true,
            releaseName = 'ESXi 6.5',
            error = <unset>,
            controllers = (vim.host.VsanHclControllerInfo) [],
            pnics = (vim.host.VsanHclNicInfo) []
         }
      ],
      updateItems = (vim.vsan.VsanUpdateItem) []
   },
   groups = (vim.cluster.VsanClusterHealthGroup) [
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.network',
         groupName = 'Network',
         groupHealth = 'red',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.hostdisconnected',
               testName = 'Hosts disconnected from VC',
               testDescription = 'This check refers to whether VC has an active connection to all hosts in the cluster. If any host is disconnected from VC (or not responding) it could cause operational issues. If VC is not connected to the host, its state is unknown to VC. The host may be up, and may be participating in the vSAN cluster, serving data, and playing a critical role in the storage functions of the cluster. Or the host may be down and unavailable. VC and hence the vSAN Health check cannot fully assess the situation as long the host is disconnected. If the host is participating in the vSAN cluster it will show up in the Unexpected vSAN cluster member check as unexpected, as its UUID cannot be determined, so the health check cannot conclusively tell if the host it is seeing in the vSAN cluster is the disconnected one or not. In addition, other health checks, like vSAN connectivity checks or disk health checks will not be able to take the disconnected host into account.',
               testShortDescription = 'Checks if VC has an active connection to all hosts in the cluster.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disconnected hosts',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Connection Status',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.hostconnectivity',
               testName = 'Hosts with connectivity issues',
               testDescription = 'This check refers to situations where VC lists the host as connected, but API calls from VC to the host are failing. This should be extremely rare, but in case it happens it leads to similar issues as the Host disconnected from VC situation.',
               testShortDescription = 'Checks if API calls from VC to a host are failing while the host is in connected state.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'red',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Hosts with communication issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24261'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.clusterpartition',
               testName = 'vSAN cluster partition',
               testDescription = 'To ensure proper functionality, all vSAN hosts must be able to communicate over both multicast and unicast. If they cannot, a vSAN cluster will split into multiple partitions, i.e. sub-groups of hosts that can communicate, but not to other sub-groups. When that happens, vSAN objects might become unavailable until the network misconfiguration is resolved.',
               testShortDescription = 'Checks if the vSAN cluster is partitioned due to a network issue.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Partition list',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Partition',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              '1',
                              '5899c8b2-290b-661f-cff4-246e963d08d6'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vsanvmknic',
               testName = 'All hosts have a vSAN vmknic configured',
               testDescription = 'In order to participate in a vSAN cluster, and form a single group of fully connected hosts, each host in a vSAN cluster must have a vmknic (VMkernel network interface or VMkernel adapter) configured for vSAN traffic.',
               testShortDescription = 'Checks if all the hosts in the vSAN cluster have a configured vmknic with vSAN traffic enabled.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'red',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Hosts with no vSAN vmknic present',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.matchingsubnet',
               testName = 'All hosts have matching subnets',
               testDescription = 'In order to participate in a vSAN cluster, and form a single group of fully connected hosts, each host in a vSAN cluster must be able to talk to every other host in the cluster. This check verifies all vSAN vmknics are in the same IP subnet. If you consciously set up vSAN over an L3 network, a failure of this check should be ignored.',
               testShortDescription = 'Checks if all the hosts in the vSAN cluster are in the same IP subnet.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'vSAN IP Subnet configurations',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'IP Subnet(s)',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.smallping',
               testName = 'vSAN: Basic (unicast) connectivity check',
               testDescription = 'Performs a ping test with small packet size from each host to all other hosts. If this check fails, there is a basic issue with network connectivity. Check vmknic, uplink, VLAN, physical switch and associated settings. If this check passes, basic unicast connectivity is working properly.',
               testShortDescription = 'Performs a ping test with small packet size from each host to all other hosts.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Only failed pings',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Ping results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.largeping',
               testName = 'vSAN: MTU check (ping with large packet size)',
               testDescription = 'Performs a ping test with large packet size from each host to all other hosts. If this check fails while the basic connectivity check passes, there is an issue with MTU settings.',
               testShortDescription = 'Performs a ping test with large packet size from each host to all other hosts.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Only failed pings',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Ping results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vmotionpingsmall',
               testName = 'vMotion: Basic (unicast) connectivity check',
               testDescription = 'Performs a ping test with small packet size between all VMkernel adapters with vMotion traffic enabled.',
               testShortDescription = 'Performs a ping test with small packet size between all VMkernel adapters with vMotion traffic enabled.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Only failed pings',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Ping results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vmotionpinglarge',
               testName = 'vMotion: MTU check (ping with large packet size)',
               testDescription = 'Performs a ping test with large packet size between all VMKernel adapters with vMotion traffic enabled.',
               testShortDescription = 'Performs a ping test with large packet size between all VMKernel adapters with vMotion traffic enabled.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Only failed pings',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Ping results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Ping result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.hostlatencycheck',
               testName = 'Network latency check',
               testDescription = 'Performs a network latency check of vSAN hosts. The network configuration guidance of normal cluster requires RTT less than 1ms. To allow for temporary fluctuations, this health check reports warnings based on a conservative threshold of 5ms. If this check fails, please check vmknic, uplink, VLAN, physical switch and associated settings to locate the network issue. NOTE: This check will be skipped if the pair of hosts failed connectivity check.',
               testShortDescription = 'Performs a network latency check of vSAN hosts. It requires <1ms RTT. To allow for temporary fluctuations, this health check reports warnings based on a conservative threshold of 5ms. NOTE: This check will be skipped if the pair of hosts failed connectivity check.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Only failed network latency check results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Network latency (ms)',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Network latency check result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Network latency check results',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'From Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'To Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Network latency (ms)',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Network latency check result',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.multicastsuspected',
               testName = 'Multicast assessment based on other checks',
               testDescription = 'This check indicates there may be a multicast issue if vSAN config checks passed, unicast connectivity checks passed, yet there is a vSAN cluster partition. If it fails, an additional Active multicast connectivity check will be performed.',
               testShortDescription = 'Checks if any of the hosts in the vSAN cluster have IP multicast connectivity issue.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.multicastsettings',
               testName = 'All hosts have matching multicast settings',
               testDescription = 'In order to participate in a vSAN cluster, and form a single group of fully connected hosts, each host in a vSAN cluster must use the same IP multicast addresses and depending on whether the cluster uses IPv4 or IPv6, the corresponding multicast configuration will be verified. Adjust multicast IPs using esxcli vsan network list and esxcli vsan network ip set.',
               testShortDescription = 'Checks if all the hosts in the vSAN cluster have matching IP multicast configuration. Depending on whether the cluster uses IPv4 or IPv6, the corresponding multicast configuration will be verified.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Multicast configurations',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Multicast IPs',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.cluster',
         groupName = 'Cluster',
         groupHealth = 'yellow',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.healtheaminstall',
               testName = 'ESXi vSAN Health service installation',
               testDescription = 'Verifies that all hosts have the vSAN Health Service installed. Other vSAN health check will be performed only when all the host are upgraded to 6.0U2 or later release.',
               testShortDescription = 'Checks if all the hosts in the vSAN cluster have the vSAN Health Service installed. Note that other vSAN health check will be performed only when all the host are upgraded to 6.0U2 or later release.',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Host vSAN Health service installation',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Status',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Error',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              'green',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.healthversion',
               testName = 'vSAN Health Service up-to-date',
               testDescription = 'Checks that the version of the vSAN Health VIB that is installed on all ESXi hosts in the cluster is the same as the Health version of VC. if the check fails, it is recommended that you update the version of the vSAN Health VIB on the cluster.',
               testShortDescription = 'Checks the vSAN health VIB version in all of hosts in a vSAN cluster',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'vSAN Health Service Versions',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Version in ESXi',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Version in VC',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Error',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              '6.5.0.0',
                              '6.7.0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.advcfgsync',
               testName = 'Advanced vSAN configuration in sync',
               testDescription = 'vSAN has a number of advanced config options that can be used for tuning or to address special requirements of particular deployments. Usually such settings get changed under the guidance of VMware Support, using a VMware KB article procedure. These advanced config options are set per host, which makes it easy to create inconsistent configurations across a cluster. This check ensures that critical vSAN advanced config options have the same value or default value across all hosts in a given cluster.',
               testShortDescription = 'Checks if all of the hosts in a vSAN cluster have consistent non-default advanced configuration options. The advanced configuration with default value will be skipped and not shown in the result.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Advanced vSAN configuration in sync',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Option',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Value',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Hosts with that value',
                           type = 'dynamic'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.clomdliveness',
               testName = 'vSAN CLOMD liveness',
               testDescription = 'Check the CLOMD liveness on all of the vSAN hosts',
               testShortDescription = 'Checks the CLOM daemon liveness.',
               testHealthyEntities = 2,
               testAllEntities = 2,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'vSAN Host CLOMD Liveness',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'State',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Error',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24261',
                              'Unknown',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              'alive',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.diskbalance',
               testName = 'vSAN Disk Balance',
               testDescription = 'This feature helps a user to monitor the balance state on a host. A user can trigger a proactive disk rebalance if any disk shows an unbalance. A user can also stop a proactive rebalance if it has been already initiated. Click on AskVMware link for more details.',
               testShortDescription = 'Checks the vSAN disk balance status on all hosts.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Overview',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Metric',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Value',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Average Disk Usage',
                              '0 %'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Maximum Disk Usage',
                              '0 %'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Maximum Variance',
                              '0 %'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'LM Balance Index',
                              '0 %'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disk Balance',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Rebalance State',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Data To Move',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'DiskBalance',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.diskbalance',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Proactive Rebalance Disks'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.diskbalance.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Rebalance the vSAN objects on the disks.'
                     },
                     enabled = false
                  },
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'StopDiskBalance',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.stopdiskbalance',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Stop Proactive Rebalance Disks'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.stopdiskbalance.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Stop rebalance the vSAN objects on the disks.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.resynclimit',
               testName = 'Resync operations throttling',
               testDescription = 'If this check fails, it means that resync operations are throttled. Please clear the limit, unless you need it for particular cases like a potential cluster meltdown.',
               testShortDescription = 'Checks if the resync operations are throttled on any hosts. Please clear the limit, unless you need it for particular cases like a potential cluster meltdown.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Hosts with resync operations throttled',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Resync Bandwith Limit',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vcauthoritative',
               testName = 'vCenter state is authoritative',
               testDescription = "During normal operation, the vCenter server state is regarded as source of truth, and ESXi hosts are automatically updated with the latest host membership list. When vCenter server is replaced or recovered from backup, the host membership list in vCenter server may be out of sync. This health check detects such cases, and alerts if vCenter server state was not pushed to ESXi due to vCenter server being out of sync. In such cases, first fully restore the membership list in vCenter server, and then perform 'Update ESXi configuration' action if required.",
               testShortDescription = 'Checks if vCenter server state is pushed to ESXi, and the host membership is not out of sync.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Hosts that are out of sync',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Last Update by VC',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Last Update Time',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'RemediateClusterConfig',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.overrideconfig',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update ESXi configuration'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.overrideconfig.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update ESXi configuration which is out of sync with current vCenter server.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.consistentconfig',
               testName = 'vSAN cluster configuration consistency',
               testDescription = 'If this check fails, it means that there are inconsistent configuration (like dedup/compression, encryption) setup on hosts or disks with the cluster.',
               testShortDescription = 'Checks if the hosts and disks have a consistent configuration with the cluster.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Issue',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'RemediateClusterConfig',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.remediateconfig',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Remediate inconsistent configuration'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.remediateconfig.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Remediate hosts and disks which have inconsistent configurations (e.g. dedup/compression, encryption) with the cluster.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.timedrift',
               testName = 'Time is synchronized across hosts and VC',
               testDescription = 'Checks time difference among VC and hosts. Any difference larger than 60 seconds will lead this check to fail. If the check fails, it is recommended that you check the NTP server configuration.',
               testShortDescription = 'Checks that time of hosts and VC are synchronized within 1 minute.',
               testHealthyEntities = 0,
               testAllEntities = 1,
               testHealth = 'yellow',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = <unset>,
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Time difference with VC',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'NTP Service Enabled',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Status',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Reason',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              '- 6h 6m 25s',
                              'No',
                              'yellow',
                              'Host and VC time differ more than 1 minute'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.clustermembership',
               testName = 'vSphere cluster members match vSAN cluster members',
               testDescription = 'Checks that vSphere cluster members match vSAN cluster members',
               testShortDescription = 'Checks that vSphere cluster members match vSAN cluster members',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Cluster membership',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'In vSphere Cluster',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'In vSAN Cluster',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              'green',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.extendedconfig',
               testName = 'vSAN extended configuration in sync',
               testDescription = "vSAN cluster extended configurations are set as object repair timer is 60 minutes, site read locality is Enabled, customized swap object is Enabled, large scale cluster support is Disabled; For host with inconsistent extended configurations, vSAN cluster remediation is recommended, for host doesn't support any extended configuration, ESXi software upgrade is needed; And to make cluster scalability configuration take effect, host reboot could be required.",
               testShortDescription = 'Check extended configurations for all vSAN hosts, expected object repair timer is 60 minutes, site read locality is Enabled, customized swap object is Enabled, large scale cluster support is Disabled.',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'vSAN host extended configuration status',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'vSAN host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Object repair timer',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Site read locality',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Customized swap object',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Large scale cluster support',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Configurations have taken effect',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Check result',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              'Match',
                              'Match',
                              'Match',
                              'Match',
                              'Yes',
                              'green',
                              'OK'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'RemediateClusterConfig',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.remediateconfig',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Remediate inconsistent configuration'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.remediateconfig.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Remediate hosts and disks which have inconsistent configurations (e.g. dedup/compression, encryption) with the cluster.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.upgradesoftware',
               testName = 'Software version compatibility',
               testDescription = 'Once a vSAN cluster starts using a new on-disk format version (after software upgrade), the cluster becomes incompatible with hosts of older software version that do not support the new on-disk format. If such an older host version is introduced in the cluster, this host is either in a network partition or can only see/access a very limited set of data in the cluster. Such configurations are unsupported and an immediate software upgrade or removal of the older host version are advised.',
               testShortDescription = 'Checks the software version compatibility of all in-use hosts.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Hosts with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Hosts need software upgrade',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Detailed Reason',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.upgradelowerhosts',
               testName = 'Disk format version',
               testDescription = 'vSAN cluster expected format version is 3, which is the highest supported format version by any host in the cluster. For disk with format version lower than expected version, vSAN on-disk format upgrade is recommended, to support latest vSAN features.',
               testShortDescription = 'Checks format version of all in-use vSAN disks, expected format version is 3.',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Detailed vSAN disks format status',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'vSAN host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disks with older format',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Check Result',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              '0/0',
                              'green',
                              'OK'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'UpgradeVsanDiskFormat',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.test.upgrade.action.upgrade.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Upgrade On-disk Format'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.test.upgrade.action.upgrade',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Performing a vSAN on-disk format upgrade, which is a long running operation. It will upgrade one disk group at a time, and for each disk group it will evacuate all data stored on that disk group, remove the old vSAN format and re-add the disk group to vSAN with the new format.'
                     },
                     enabled = false
                  }
               ]
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.perfsvc',
         groupName = 'Performance service',
         groupHealth = 'yellow',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.perfsvcstatus',
               testName = 'Performance service status',
               testDescription = 'Checks the status of the vSAN performance service. Warning from this check can be remediated by enabling vSAN performance service following VMware vSAN administration guide.',
               testShortDescription = 'VMware recommends that all deployments of vSAN have the vSAN Performance Service enabled. It provides access to real time and historic performance data of vSAN.',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'yellow',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Details',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Result',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Status',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'yellow',
                              'Performance service is disabled'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'EnablePerformanceServiceAction',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.enableperformanceservice',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Enable'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.enableperformanceservice.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Enable vSAN performance service'
                     },
                     enabled = true
                  }
               ]
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.vum',
         groupName = 'vSAN Build Recommendation',
         groupHealth = 'yellow',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vumconfig',
               testName = 'vSAN Build Recommendation Engine Health',
               testDescription = 'vSAN Build Recommendation Engine relies on VMware compatibility guide and VMware release metadata for its recommendation. In addition, it also requires VMware Update Manager service to be available, Internet connectivity and valid my.vmware.com credentials to be set to provide build recommendations. This health check makes sure that these dependecies are met and the recommendation engine is functioning correctly.',
               testShortDescription = 'Checks that the build recommendation engine has all its dependencies met and is functioning as expected',
               testHealthyEntities = <unset>,
               testAllEntities = 1,
               testHealth = 'yellow',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Issue Information',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'my.vmware.com login credentials are not set. Please login with proper credentials. Baselines will be generated, if applicable, in around 1 minute or so.'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'LoginVumIsoDepot',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.loginvumisodepot',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Login to my.vmware.com'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.loginvumisodepot.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Login to my.vmware.com and save cookie'
                     },
                     enabled = true
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vumrecommendation',
               testName = 'vSAN build recommendation',
               testDescription = 'vSAN build recommendation. This is the ESXi build that vSAN recommends to be the most appropriate, given the hardware, its compatibility per VMware Compatibility Guide and the available releases from VMware.',
               testShortDescription = 'vSAN build recommendation based on the available releases and VCG compatibility guide',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'vSAN build recommendation',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Cluster',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.physicaldisks',
         groupName = 'Physical disk',
         groupHealth = 'green',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.physdiskoverall',
               testName = 'Operation health',
               testDescription = 'Checks the physical disk operation health for all hosts in the vSAN cluster. If this check fails, the disk cannot be used by vSAN anymore with the possible reasons like issue in reading the disk metadata or the vSAN software issue preventing it to use this disk',
               testShortDescription = 'Checks the operation health of the physical disks for all hosts in the vSAN cluster.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disks with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Overall operation health',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Metadata',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Operational',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'In CMMDS/VSI',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Operational State',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommendation',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.physdiskcapacity',
               testName = 'Disk capacity',
               testDescription = 'If this check fails for a specific disk, it indicates that this disk is low on free disk space. This health check is only applicable to capacity tier drives, not to the cache devices.',
               testShortDescription = 'Checks the free space on physical disks in the vSAN cluster.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disks with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Capacity',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Free Space',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Rebalance State',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.physdiskcongestion',
               testName = 'Congestion',
               testDescription = 'If this health status not green/OK, vSAN is still using the disk, but it is in a state of (possibly severely) reduced performance, manifesting in low throughput/IOPS and high latencies for vSAN objects using this disk.',
               testShortDescription = 'Checks whether vSAN is using the disk with reduced performance.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disks with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Congestion',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Congestion Info',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.physdiskcomplimithealth',
               testName = 'Component limit health',
               testDescription = 'Checks if the number of components on the physical disk reaches the maximum limit',
               testShortDescription = 'Checks the component limits on each physical disk.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Disks with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk Component Utilization',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  },
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'All disks',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk Component Utilization',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.componentmetadata',
               testName = 'Component metadata health',
               testDescription = 'This check will fail if vSAN has encountered an issue with the integrity of the metadata of a component in this disk. This could be due to faulty drives, faulty controller or a misbehaving device driver, but could also originate from a problem in the vSAN software. The best course of action is to engage VMware Support.',
               testShortDescription = 'Checks whether vSAN has encountered an integrity issue of the metadata of a component on this disk.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Components with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Component',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Notes',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.lsomheap',
               testName = 'Memory pools (heaps)',
               testDescription = 'This check will fail if vSAN is running low on vital memory pools needed for the correct operation of physical disks. Even under high load, this should not happen. If it does happen, VMware Support should be contacted. Likely the disk will also report bad congestion health, which will in turn lead to performance issues.',
               testShortDescription = 'Checks if vSAN is running low on vital memory pools, needed for the correct operation of physical disks.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Heaps with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Heap',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.lsomslab',
               testName = 'Memory pools (slabs)',
               testDescription = 'This check will fail if vSAN is running low on a vital memory pool needed for the operation of physical disks. Even under high load, this should not happen. If it does happen, VMware Support should be contacted. Likely the disk will also report bad congestion health, which will in turn lead to performance issues.',
               testShortDescription = 'Checks if vSAN is running low on the vital memory pool, needed for the operation of physical disks.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Slabs with issues',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Slab',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.data',
         groupName = 'Data',
         groupHealth = 'green',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.objecthealth',
               testName = 'vSAN object health',
               testDescription = 'Provides a cluster wide overview by summarizing all objects in the cluster, grouping them in fine grained categories of object health.',
               testShortDescription = 'Checks the health status of all vSAN objects.',
               testHealthyEntities = <unset>,
               testAllEntities = 8,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Object health overview',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health/Objects',
                           type = 'vsanObjectHealth'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Number',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Objects UUID',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'reduced-availability-with-no-rebuild-delay-timer',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'datamove',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'inaccessible',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'healthy',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'non-availability-related-incompliance',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'non-availability-related-reconfig',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'reduced-availability-with-no-rebuild',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'reduced-availability-with-active-rebuild',
                              '0',
                              ''
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'RepairClusterObjectsAction',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.repairclusterobjects',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Repair Objects Immediately'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.repairclusterobjects.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Repairs the absent or degraded vSAN objects immediately.'
                     },
                     enabled = false
                  }
               ]
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.limits',
         groupName = 'Limits',
         groupHealth = 'green',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.limit0hf',
               testName = 'Current cluster situation',
               testDescription = "Checks for component limits, free capacity tier disk space, and read cache reservations across the entire cluster. Note that this way of looking at the resources is simplistic and doesn't take all vSAN placement rules into account. Practical usable resources may be less.",
               testShortDescription = 'Checks the vSAN component limits, disk space and read cache reservations.',
               testHealthyEntities = 3,
               testAllEntities = 3,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Resources',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Resource',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Utilization',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Component utilization',
                              '0% (0 of 3000)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Disk space utilization',
                              '0% (0GB of 0GB)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Read Cache reservations',
                              '0% (0.0GB of 0.0GB)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.limit1hf',
               testName = 'After 1 additional host failure',
               testDescription = 'This health check simulates the failure of the host with most resources consumed and shows the cluster resource consumption then. First, the resources on that host would be no longer available. Second, vSAN will attempt to re-protect all objects that were now running with reduced redundancy. Re-protection of all objects is impossible if utilization is more than 100%.',
               testShortDescription = 'Checks the vSAN component limits, disk space and RC reservations assuming one host failure.',
               testHealthyEntities = 3,
               testAllEntities = 3,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Resources',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Resource',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Utilization',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Component utilization',
                              '0% (0 of 0)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Disk space utilization',
                              '0% (0GB of 0GB)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Read Cache reservations',
                              '0% (0.0GB of 0.0GB)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.nodecomponentlimit',
               testName = 'Host component limit',
               testDescription = 'This health checks lists the component limit, and its current usage for each host. Note that when the component limit is hit or the component is not balanced, you may want to add host or rebalance these components.',
               testShortDescription = 'Checks the host component limit and usage for each host in the vSAN cluster',
               testHealthyEntities = 1,
               testAllEntities = 1,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Resources',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Type',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host Component Utilization',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Health',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'mor:ManagedObjectReference:HostSystem:host-24242',
                              'Normal',
                              '0% (0 of 3000)',
                              'green'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.hcl',
         groupName = 'Hardware compatibility',
         groupHealth = 'green',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.hcldbuptodate',
               testName = 'vSAN HCL DB up-to-date',
               testDescription = 'Checks the age of the VMware Hardware Compatibility Guide database used for the HCL checks. Shows warning or error when it is older than 90 or 180 days, respectively. VMware updates the VCG frequently, so it is important to keep the local copy up-to-date.',
               testShortDescription = 'Checks the age of the VMware Hardware Compatibility Guide database.',
               testHealthyEntities = <unset>,
               testAllEntities = 2,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'HCL DB info',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Entity',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Time in UTC',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) [
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Current time',
                              '2019-06-20 08:05:10'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        },
                        (vim.cluster.VsanClusterHealthResultRow) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           values = (str) [
                              'Local HCL DB copy last updated',
                              '2019-06-20 01:09:00'
                           ],
                           nestedRows = (vim.cluster.VsanClusterHealthResultRow) []
                        }
                     ]
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'UploadHclDb',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.uploadhcldb',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Upload from file...'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.uploadhcldb.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Updates the HCL DB by uploading a file.'
                     },
                     enabled = false
                  },
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'UpdateHclDbFromInternet',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.updatehcldbfrominternet',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Get latest version online'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.updatehcldbfrominternet.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Downloads an update of the HCL DB from the internet.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.autohclupdate',
               testName = 'vSAN HCL DB Auto Update',
               testDescription = 'Checks the vSAN HCL DB can be downloaded and updated from the VMware HCL release website automatically. When there is no internet access to the VMware public website or the vSAN HCL DB auto update is not enabled, this health check will be in silent health check list by default to show skipped status unless user removes it from silent list manually. Otherwise, it shows warning if the HCL database cannot be auto updated for any other reason like cannot connect VMware HCL release website, fail to download latest HCL DB or fail to update the local HCL DB.',
               testShortDescription = 'Checks the vSAN HCL DB can be downloaded and updated from the VMware HCL release website automatically. When there is no internet access to the VMware public website or the vSAN HCL DB auto update is not enabled, this health check will be in silent health check list by default to show skipped status unless user removes it from silent list manually. Otherwise, it shows warning if the HCL database cannot be auto updated for any other reason like cannot connect VMware HCL release website, fail to download latest HCL DB or fail to update the local HCL DB.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.controlleronhcl',
               testName = 'SCSI controller is VMware certified',
               testDescription = 'Displays information about the storage I/O controller and verifies that the controller is supported in the VMware Compatibility Guide, based on its PCI ID. If there is a mismatch, contact VMware support.',
               testShortDescription = 'Checks if the controller is compatible with the VMware Compatibility Guide.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Controller List',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Current controller',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'PCI ID',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Controller certified',
                           type = 'health'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.controllerreleasesupport',
               testName = 'Controller is VMware certified for ESXi release',
               testDescription = 'Displays information about the storage I/O controller drivers. Checks if the installed driver is supported for the corresponding controller in the current release of ESXi. Only the VMware certified controller will be tested and shown in the result',
               testShortDescription = 'Displays information about whether there is any driver supported for a given controller in the release of ESXi installed. Only the VMware certified controller will be tested and shown in the result',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Controller List',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Current ESXi release',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Release supported',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Certified ESXi releases',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.controllerdriver',
               testName = 'Controller driver is VMware certified',
               testDescription = 'Checks if the driver used by a controller is listed as certified in the VMware Compatibility Guide. Only the controller which is on the vSAN HCL and certified for the current release of ESXi will be tested and shown in the result',
               testShortDescription = 'Checks if the controller driver is VMware certified. Only the controller which is on vSAN HCL and certified for the current release of ESXi will be tested and shown in the result',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Controller List',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Current driver',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Driver certified',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommended drivers',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'ClusterUpgrade',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.clusterupgrade',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update software'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.clusterupgrade.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update software.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.controllerfirmware',
               testName = 'Controller firmware is VMware certified',
               testDescription = "Checks if controller firmware is certified per the VMware Compatibility Guide. A 'N/A' result means that a vendor tool should be installed if it is available to determine actual firmware version. Do so via the 'Update software' action when available, to update vendor tool and firmware to the recommended version. Only the controller which is on the vSAN HCL and certified for the current release of ESXi will be tested and shown in the result.",
               testShortDescription = "Checks if the controller firmware is VMware certified. A 'N/A' result means that a vendor tool should be installed if it is available to determine actual firmware version. Do so via the 'Update software' action when available, to update vendor tool and firmware to the recommended version. Only the controller which is on the vSAN HCL and certified for the current release of ESXi will be tested and shown in the result.",
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Controller List',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Current firmware',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Firmware certified',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommended firmwares',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'ClusterUpgrade',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.clusterupgrade',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update software'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.clusterupgrade.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Update software.'
                     },
                     enabled = false
                  }
               ]
            },
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.controllerdiskmode',
               testName = 'Controller disk group mode is VMware certified',
               testDescription = 'Checks if the vSAN disk group type (All-Flash or Hybrid) is certified for the used SCSI controller in the VMware Compatibility Guide. Only the controller which is on the vSAN HCL and certified for the current release of ESXi will be tested and shown in the result.',
               testShortDescription = 'Checks if the vSAN disk group type (All-Flash or Hybrid) is VMware certified for the used SCSI controller which is on the vSAN HCL and certified for the current release of ESXi.',
               testHealthyEntities = 0,
               testAllEntities = 0,
               testHealth = 'green',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [
                  (vim.cluster.VsanClusterHealthResultTable) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     label = 'Controller List',
                     columns = (vim.cluster.VsanClusterHealthResultColumnInfo) [
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Host',
                           type = 'dynamic'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Device',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Current disk group mode',
                           type = 'string'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Disk group mode certified',
                           type = 'health'
                        },
                        (vim.cluster.VsanClusterHealthResultColumnInfo) {
                           dynamicType = <unset>,
                           dynamicProperty = (vmodl.DynamicProperty) [],
                           label = 'Recommended disk group mode',
                           type = 'string'
                        }
                     ],
                     rows = (vim.cluster.VsanClusterHealthResultRow) []
                  }
               ],
               testActions = (vim.cluster.VsanClusterHealthAction) []
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      },
      (vim.cluster.VsanClusterHealthGroup) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         groupId = 'com.vmware.vsan.health.test.cloudhealth',
         groupName = 'Online health',
         groupHealth = 'skipped',
         groupTests = (vim.cluster.VsanClusterHealthTest) [
            (vim.cluster.VsanClusterHealthTest) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               testId = 'com.vmware.vsan.health.test.vsancloudhealthceipexception',
               testName = 'Customer experience improvement program (CEIP)',
               testDescription = 'The current status of the Customer Experience Improvement Program (CEIP) is disabled. Online health checks are not available if CEIP is disabled.',
               testShortDescription = 'The current status of the Customer Experience Improvement Program (CEIP) is disabled. Online health checks are not available if CEIP is disabled.',
               testHealthyEntities = <unset>,
               testAllEntities = 0,
               testHealth = 'skipped',
               testDetails = (vim.cluster.VsanClusterHealthResultBase) [],
               testActions = (vim.cluster.VsanClusterHealthAction) [
                  (vim.cluster.VsanClusterHealthAction) {
                     dynamicType = <unset>,
                     dynamicProperty = (vmodl.DynamicProperty) [],
                     actionId = 'EnableCeip',
                     actionLabel = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.label.enableceip',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Configure CEIP'
                     },
                     actionDescription = (vmodl.LocalizableMessage) {
                        dynamicType = <unset>,
                        dynamicProperty = (vmodl.DynamicProperty) [],
                        key = 'com.vmware.vsan.health.action.enableceip.short',
                        arg = (vmodl.KeyAnyValue) [],
                        message = 'Configure CEIP.'
                     },
                     enabled = true
                  }
               ]
            }
         ],
         groupDetails = (vim.cluster.VsanClusterHealthResultBase) []
      }
   ],
   overallHealth = 'red',
   overallHealthDescription = 'Network misconfiguration',
   clomdLiveness = (vim.cluster.VsanClusterClomdLivenessResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      clomdLivenessResult = (vim.cluster.VsanHostClomdLivenessResult) [
         (vim.cluster.VsanHostClomdLivenessResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2818.eng.vmware.com',
            clomdStat = 'unknown',
            error = <unset>
         },
         (vim.cluster.VsanHostClomdLivenessResult) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            clomdStat = 'alive',
            error = <unset>
         }
      ],
      issueFound = false
   },
   diskBalance = (vim.cluster.VsanClusterBalanceSummary) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      varianceThreshold = 30,
      disks = (vim.cluster.VsanClusterBalancePerDiskInfo) []
   },
   genericCluster = <unset>,
   networkConfig = <unset>,
   vsanConfig = (vim.vsan.VsanConfigCheckResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      vsanEnabled = true,
      issues = (vim.vsan.VsanConfigBaseIssue) []
   },
   burnInTest = <unset>,
   perfsvcHealth = (vim.vsan.VsanPerfsvcHealthResult) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      statsObjectInfo = (vim.cluster.VsanObjectInformation) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) [],
         directoryName = 'unknown',
         vsanObjectUuid = <unset>,
         vsanHealth = <unset>,
         policyAttributes = (vim.KeyValue) [],
         spbmProfileUuid = <unset>,
         spbmProfileGenerationId = <unset>,
         spbmComplianceResult = <unset>,
         vsanDataProtectionHealth = <unset>
      },
      statsObjectConsistent = <unset>,
      statsObjectPolicyConsistent = <unset>,
      datastoreCompatible = <unset>,
      enoughFreeSpace = <unset>,
      remediateAction = <unset>,
      hostResults = (vim.cluster.VsanPerfNodeInformation) [
         (vim.cluster.VsanPerfNodeInformation) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            version = '6.2.0',
            hostname = 'sc2-hs1-b2817.eng.vmware.com',
            error = <unset>,
            isCmmdsMaster = true,
            isStatsMaster = false,
            vsanMasterUuid = '5899c8b2-290b-661f-cff4-246e963d08d6',
            vsanNodeUuid = '5899c8b2-290b-661f-cff4-246e963d08d6',
            masterInfo = <unset>,
            diagnosticMode = <unset>
         }
      ],
      verboseModeStatus = <unset>
   },
   cluster = <unset>,
   dpdLiveness = <unset>,
   datastoreUsage = <unset>,
   dataProtectionCfgSync = (vim.cluster.VsanClusterDataProtectionCfgSyncResult) [],
   archivalAccessibilityStatus = (vim.host.VsanArchivalAccessibilityResult) []
}
